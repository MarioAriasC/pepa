module Tokens
  # TokenType
  class TokenType
    @value: String

    attr_reader value: String

    def initialize: (String value) -> void

    def eql?: (TokenType other) -> bool

    def to_s: () -> String
  end

  ILLEGAL: TokenType

  EOF: TokenType

  ASSIGN: TokenType

  EQ: TokenType

  NOT_EQ: TokenType

  IDENT: TokenType

  INT: TokenType

  PLUS: TokenType

  COMMA: TokenType

  SEMICOLON: TokenType

  COLON: TokenType

  MINUS: TokenType

  BANG: TokenType

  SLASH: TokenType

  ASTERISK: TokenType

  LT: TokenType

  GT: TokenType

  LPAREN: TokenType

  RPAREN: TokenType

  LBRACE: TokenType

  RBRACE: TokenType

  LBRACKET: TokenType

  RBRACKET: TokenType

  FUNCTION: TokenType

  LET: TokenType

  TRUE: TokenType

  FALSE: TokenType

  IF: TokenType

  ELSE: TokenType

  RETURN: TokenType

  STRING: TokenType

  KEYBOARDS: ::Hash[::String, TokenType]

  class Token
    @type: TokenType

    @literal: String

    attr_reader literal: String

    attr_reader type: TokenType

    def initialize: (TokenType type, String literal) -> void
  end
end

class String
  def lookup_ident: () -> Tokens::TokenType
end
