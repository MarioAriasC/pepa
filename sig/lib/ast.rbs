module Ast
  class Node
    def token_literal: () -> String
  end

  class Statement < Node
  end

  class Expression < Node
    def eql?: (untyped other) -> bool
  end

  module TokenHolder
    attr_reader token: Tokens::Token

    def token_literal: () -> String
  end

  module LiteralExpression
    def to_s: () -> untyped
  end

  class Program < Node
    attr_reader statements: Array[Statement]

    def initialize: (Array[Statement] statements) -> void

    def token_literal: () -> String
  end

  class LetStatement < Statement
    include TokenHolder
  end
end
